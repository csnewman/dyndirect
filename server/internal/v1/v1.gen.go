// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// NewSubdomainResponse New Subdomain Response.
type NewSubdomainResponse struct {
	// Domain Allocated domain.
	Domain string `json:"domain"`

	// Id Subdomain ID.
	Id openapi_types.UUID `json:"id"`

	// Token Control Token.
	Token string `json:"token"`
}

// OverviewResponse defines model for OverviewResponse.
type OverviewResponse struct {
	// ClientIp The clients IP address.
	ClientIp string `json:"client_ip"`

	// Version Server Version.
	Version string `json:"version"`
}

// SubdomainAcmeChallengeRequest Subdomain ACME Challenge Request.
type SubdomainAcmeChallengeRequest struct {
	// Token Control Token.
	Token string `json:"token"`

	// Values ACME Tokens.
	Values []string `json:"values"`
}

// SubdomainAcmeChallengeJSONRequestBody defines body for SubdomainAcmeChallenge for application/json ContentType.
type SubdomainAcmeChallengeJSONRequestBody = SubdomainAcmeChallengeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Server Overview
	// (GET /)
	GetOverview(w http.ResponseWriter, r *http.Request)
	// Request new subdomain
	// (POST /subdomain)
	GenerateSubdomain(w http.ResponseWriter, r *http.Request)
	// Set ACME challenge tokens
	// (POST /subdomain/{subdomainId}/acme-challenge)
	SubdomainAcmeChallenge(w http.ResponseWriter, r *http.Request, subdomainId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOverview operation middleware
func (siw *ServerInterfaceWrapper) GetOverview(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOverview(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenerateSubdomain operation middleware
func (siw *ServerInterfaceWrapper) GenerateSubdomain(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateSubdomain(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubdomainAcmeChallenge operation middleware
func (siw *ServerInterfaceWrapper) SubdomainAcmeChallenge(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subdomainId" -------------
	var subdomainId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "subdomainId", runtime.ParamLocationPath, chi.URLParam(r, "subdomainId"), &subdomainId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subdomainId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubdomainAcmeChallenge(w, r, subdomainId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetOverview)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/subdomain", wrapper.GenerateSubdomain)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/subdomain/{subdomainId}/acme-challenge", wrapper.SubdomainAcmeChallenge)
	})

	return r
}

type GetOverviewRequestObject struct {
}

type GetOverviewResponseObject interface {
	VisitGetOverviewResponse(w http.ResponseWriter) error
}

type GetOverview200JSONResponse OverviewResponse

func (response GetOverview200JSONResponse) VisitGetOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateSubdomainRequestObject struct {
}

type GenerateSubdomainResponseObject interface {
	VisitGenerateSubdomainResponse(w http.ResponseWriter) error
}

type GenerateSubdomain200JSONResponse NewSubdomainResponse

func (response GenerateSubdomain200JSONResponse) VisitGenerateSubdomainResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateSubdomain429JSONResponse ErrorResponse

func (response GenerateSubdomain429JSONResponse) VisitGenerateSubdomainResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type SubdomainAcmeChallengeRequestObject struct {
	SubdomainId openapi_types.UUID `json:"subdomainId"`
	Body        *SubdomainAcmeChallengeJSONRequestBody
}

type SubdomainAcmeChallengeResponseObject interface {
	VisitSubdomainAcmeChallengeResponse(w http.ResponseWriter) error
}

type SubdomainAcmeChallenge200Response struct {
}

func (response SubdomainAcmeChallenge200Response) VisitSubdomainAcmeChallengeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SubdomainAcmeChallenge403JSONResponse ErrorResponse

func (response SubdomainAcmeChallenge403JSONResponse) VisitSubdomainAcmeChallengeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type SubdomainAcmeChallenge429JSONResponse ErrorResponse

func (response SubdomainAcmeChallenge429JSONResponse) VisitSubdomainAcmeChallengeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Server Overview
	// (GET /)
	GetOverview(ctx context.Context, request GetOverviewRequestObject) (GetOverviewResponseObject, error)
	// Request new subdomain
	// (POST /subdomain)
	GenerateSubdomain(ctx context.Context, request GenerateSubdomainRequestObject) (GenerateSubdomainResponseObject, error)
	// Set ACME challenge tokens
	// (POST /subdomain/{subdomainId}/acme-challenge)
	SubdomainAcmeChallenge(ctx context.Context, request SubdomainAcmeChallengeRequestObject) (SubdomainAcmeChallengeResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetOverview operation middleware
func (sh *strictHandler) GetOverview(w http.ResponseWriter, r *http.Request) {
	var request GetOverviewRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOverview(ctx, request.(GetOverviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOverview")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOverviewResponseObject); ok {
		if err := validResponse.VisitGetOverviewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GenerateSubdomain operation middleware
func (sh *strictHandler) GenerateSubdomain(w http.ResponseWriter, r *http.Request) {
	var request GenerateSubdomainRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateSubdomain(ctx, request.(GenerateSubdomainRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateSubdomain")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GenerateSubdomainResponseObject); ok {
		if err := validResponse.VisitGenerateSubdomainResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// SubdomainAcmeChallenge operation middleware
func (sh *strictHandler) SubdomainAcmeChallenge(w http.ResponseWriter, r *http.Request, subdomainId openapi_types.UUID) {
	var request SubdomainAcmeChallengeRequestObject

	request.SubdomainId = subdomainId

	var body SubdomainAcmeChallengeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SubdomainAcmeChallenge(ctx, request.(SubdomainAcmeChallengeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubdomainAcmeChallenge")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SubdomainAcmeChallengeResponseObject); ok {
		if err := validResponse.VisitSubdomainAcmeChallengeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/bNhD+VwhuDxsgW87PLnpamhSDgWXrkmAoWgTDSTxZ7ERSJSknQuD/fSBp/bCl",
	"ZGmzx70Ylo53x/vu++70SDMlKiVRWkOTR2qyAgX4v++0VvoaTaWkQfei0qpCbTl6Mzqz+2ObCmlCjdVc",
	"rugmogKNgRVO2DYR1fil5hoZTT5tQ/QOdxG13JbOYzd51AZS6WfMrEvyG97f1ClTArgcXpKhyTSvLFeS",
	"Ju4U6Y6R9tycRnvFhANj//OyVBlYZCScmPdX6evlbOzYJ11eOqdcaQGWJrSuOZsKYtXfOHGBCyWtViW5",
	"deaJ7HuIhtg+VNQWNUB1ErQJcH9fo15zvH+6+1nJUdq/eDW+8m2BJJgNWb4nwJhGYyaRW6M23mkEH+o1",
	"avJnsP973W2gaHCxQd2jeiZq7oA5zwReFFCWKFd4jV9qNPa5Bp9fXL0jnQPZeow59o0djugaynpL011y",
	"usTezaPLLQp/SsDDryhXtqDJ4cnJREABD8tw+GDRmUFraEbAtlza3mGA6fN4jQB2gbnMlSePkhYyDyoK",
	"4CVN2lc/s0bOGdfOJaIShAsxeLeJ9jGorRJeoJVWVmWqJLnShBtTc7kiIBkRIGHlHlgjQfAMyrIh0Anb",
	"tHV4EEue4ZbwnKG0POeoaUKvlrf9hdzDpkfiMsQdDJorlxIFSkvet9f64fLm8upHOiA9PZgvXBxVoYSK",
	"04Qezd2riFZgC9/K2P2scIJ/12hrLQ0BSdSW3UTlxBZIjBePq8bRD5zDktGE/oK2FQJ1XQ5a8HkOF4u2",
	"MSh9NqiqkmfeOf5sgkbxAURVenB2ighlhNXhjN9rzGlCv4v73RJvF0s8kqJnxr62ssyPDGcytRCgm34o",
	"dDU4a9y1z88oZSah8pwkQCTe9/2eAki6R+wa+WqY3Gqgx2dv8lPMYHZ6+OZ0dnx2djRLc0xnJ0dZmqYp",
	"nOaLn7qxndCPH4oi/fDWfPzj5ahODvZJZFuKdgKYuyzHh2dfV9h2+1Or1EyAbGY6gGwG6zyht0o5+TWk",
	"tZIC1khSREkEMCS5VoI0qtY7m+LFZe9+JUzUO76AS7tPrJYgO/TYo1f82P1dsk0MmcBZ1k69p7l3gzYs",
	"iO4s8X02fkw9w8Xp8epngwaBFrWhyaf9dMvLbgh0nbbKIUusckm6Fr6UlU5Yfh71428ABB1uC6trHHbu",
	"VV9Em7sQGo19q1jzdex8jZSe32ub3QXpSt5MD4kXCm9x9G3C43INJWezdkEPRFegW4ZrzpAFshFuiFSW",
	"eA9PvB2G/JeCW4Zrhbz/j5an9R9ChlUdlFxr9yFUWFuZJI7XB/Phd8/d5p8AAAD//w3BGXyqDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
